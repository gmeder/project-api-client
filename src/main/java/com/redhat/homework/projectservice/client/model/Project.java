/*
 * ProjectAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.redhat.homework.projectservice.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Project
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-07-03T21:26:49.400-05:00[America/Lima]")
public class Project {
  @SerializedName("projectId")
  private String projectId = null;

  @SerializedName("ownerFirstName")
  private String ownerFirstName = null;

  @SerializedName("ownerLastName")
  private String ownerLastName = null;

  @SerializedName("ownerEmailAddress")
  private String ownerEmailAddress = null;

  @SerializedName("projectTitle")
  private String projectTitle = null;

  @SerializedName("projectDescription")
  private String projectDescription = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    OPEN("open"),
    COMPLETED("completed"),
    IN_PROGRESS("in_progress"),
    CANCELLED("cancelled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  public Project projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * @return projectId
  **/
  @Schema(description = "")
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }

  public Project ownerFirstName(String ownerFirstName) {
    this.ownerFirstName = ownerFirstName;
    return this;
  }

   /**
   * Get ownerFirstName
   * @return ownerFirstName
  **/
  @Schema(description = "")
  public String getOwnerFirstName() {
    return ownerFirstName;
  }

  public void setOwnerFirstName(String ownerFirstName) {
    this.ownerFirstName = ownerFirstName;
  }

  public Project ownerLastName(String ownerLastName) {
    this.ownerLastName = ownerLastName;
    return this;
  }

   /**
   * Get ownerLastName
   * @return ownerLastName
  **/
  @Schema(description = "")
  public String getOwnerLastName() {
    return ownerLastName;
  }

  public void setOwnerLastName(String ownerLastName) {
    this.ownerLastName = ownerLastName;
  }

  public Project ownerEmailAddress(String ownerEmailAddress) {
    this.ownerEmailAddress = ownerEmailAddress;
    return this;
  }

   /**
   * Get ownerEmailAddress
   * @return ownerEmailAddress
  **/
  @Schema(description = "")
  public String getOwnerEmailAddress() {
    return ownerEmailAddress;
  }

  public void setOwnerEmailAddress(String ownerEmailAddress) {
    this.ownerEmailAddress = ownerEmailAddress;
  }

  public Project projectTitle(String projectTitle) {
    this.projectTitle = projectTitle;
    return this;
  }

   /**
   * Get projectTitle
   * @return projectTitle
  **/
  @Schema(description = "")
  public String getProjectTitle() {
    return projectTitle;
  }

  public void setProjectTitle(String projectTitle) {
    this.projectTitle = projectTitle;
  }

  public Project projectDescription(String projectDescription) {
    this.projectDescription = projectDescription;
    return this;
  }

   /**
   * Get projectDescription
   * @return projectDescription
  **/
  @Schema(description = "")
  public String getProjectDescription() {
    return projectDescription;
  }

  public void setProjectDescription(String projectDescription) {
    this.projectDescription = projectDescription;
  }

  public Project status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Project project = (Project) o;
    return Objects.equals(this.projectId, project.projectId) &&
        Objects.equals(this.ownerFirstName, project.ownerFirstName) &&
        Objects.equals(this.ownerLastName, project.ownerLastName) &&
        Objects.equals(this.ownerEmailAddress, project.ownerEmailAddress) &&
        Objects.equals(this.projectTitle, project.projectTitle) &&
        Objects.equals(this.projectDescription, project.projectDescription) &&
        Objects.equals(this.status, project.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectId, ownerFirstName, ownerLastName, ownerEmailAddress, projectTitle, projectDescription, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Project {\n");
    
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    ownerFirstName: ").append(toIndentedString(ownerFirstName)).append("\n");
    sb.append("    ownerLastName: ").append(toIndentedString(ownerLastName)).append("\n");
    sb.append("    ownerEmailAddress: ").append(toIndentedString(ownerEmailAddress)).append("\n");
    sb.append("    projectTitle: ").append(toIndentedString(projectTitle)).append("\n");
    sb.append("    projectDescription: ").append(toIndentedString(projectDescription)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
